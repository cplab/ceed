#:import Clock kivy.clock.Clock

<DataBar@BoxLayout>:
    size_hint: None, None
    size: self.minimum_width, '34dp'
    more: more.__self__
    BoxLayout:
        padding: '5dp'
        spacing: '5dp'
        size_hint_x: None
        width: self.minimum_width
        id: box
        on_parent: Clock.schedule_once(lambda *x: self.remove_widget(more.__self__))
        FlatImageButton:
            scale_down_color: True
            source: 'flat_save.png'
            flat_color: app.theme.accent
            on_release:
                if app.ceed_data.filename: app.ceed_data.save()
                if not app.ceed_data.filename: app.filebrowser.target = app.ceed_data.root_path
                if not app.ceed_data.filename: app.filebrowser.dirselect =  app.filebrowser.multiselect = False
                if not app.ceed_data.filename: app.filebrowser.callback = app.ceed_data.get_filebrowser_callback(app.ceed_data.save_as, True)
                if not app.ceed_data.filename: app.filebrowser.open()
        FlatImageButton:
            scale_down_color: True
            source: 'flat_menu_down.png'
            flat_color: app.theme.accent
            on_release: root.more.open(self.parent)
        FlatDropDown:
            id: more
            flat_color: app.theme.primary_text
            flat_border_color: app.theme.divider
            FlatButton:
                text: 'Save current file'
                size_hint: None, None
                size: self.texture_size
                scale_down_color: True
                flat_color: app.theme.text_primary
                on_release:
                    if app.ceed_data.filename: app.ceed_data.save()
                    if not app.ceed_data.filename: app.filebrowser.target = app.ceed_data.root_path
                    if not app.ceed_data.filename: app.filebrowser.dirselect =  app.filebrowser.multiselect = False
                    if not app.ceed_data.filename: app.filebrowser.callback = app.ceed_data.get_filebrowser_callback(app.ceed_data.save_as, True)
                    if not app.ceed_data.filename: app.filebrowser.open()
            FlatButton:
                text: 'Save current as file'
                size_hint: None, None
                size: self.texture_size
                scale_down_color: True
                flat_color: app.theme.text_primary
                on_release:
                    app.filebrowser.target = app.ceed_data.root_path
                    app.filebrowser.dirselect =  app.filebrowser.multiselect = False
                    app.filebrowser.callback = app.ceed_data.get_filebrowser_callback(app.ceed_data.save_as, True)
                    app.filebrowser.open()
            FlatButton:
                text: 'Clear & create empty file'
                size_hint: None, None
                size: self.texture_size
                scale_down_color: True
                flat_color: app.theme.text_primary
                on_release:
                    app.filebrowser.target = app.ceed_data.root_path
                    app.filebrowser.dirselect =  app.filebrowser.multiselect = False
                    app.filebrowser.callback = app.ceed_data.get_filebrowser_callback(app.ceed_data.create_file, True, True)
                    app.filebrowser.open()
            FlatButton:
                text: 'Clear & open existing file'
                size_hint: None, None
                size: self.texture_size
                scale_down_color: True
                flat_color: app.theme.text_primary
                on_release:
                    app.filebrowser.target = app.ceed_data.root_path
                    app.filebrowser.dirselect =  app.filebrowser.multiselect = False
                    app.filebrowser.callback = app.ceed_data.get_filebrowser_callback(app.ceed_data.open_file, clear_data=True)
                    app.filebrowser.open()
            FlatButton:
                text: 'Import all settings from file'
                size_hint: None, None
                size: self.texture_size
                scale_down_color: True
                flat_color: app.theme.text_primary
                on_release:
                    app.filebrowser.target = app.ceed_data.root_path
                    app.filebrowser.dirselect =  app.filebrowser.multiselect = False
                    app.filebrowser.callback = app.ceed_data.get_filebrowser_callback(app.ceed_data.import_file)
                    app.filebrowser.open()
            FlatButton:
                text: 'Import stages from file'
                size_hint: None, None
                size: self.texture_size
                scale_down_color: True
                flat_color: app.theme.text_primary
                on_release:
                    app.filebrowser.target = app.ceed_data.root_path
                    app.filebrowser.dirselect =  app.filebrowser.multiselect = False
                    app.filebrowser.callback = app.ceed_data.get_filebrowser_callback(app.ceed_data.import_file, stages_only=True)
                    app.filebrowser.open()
            FlatButton:
                text: 'Close current file & clear'
                size_hint: None, None
                size: self.texture_size
                scale_down_color: True
                flat_color: app.theme.text_primary
                on_release: app.ceed_data.ui_close()
            FlatButton:
                text: 'Discard unsaved changes'
                size_hint: None, None
                size: self.texture_size
                scale_down_color: True
                flat_color: app.theme.text_primary
                on_release: app.ceed_data.discard_file()
            FlatButton:
                text: 'Import & append all settings from YAML'
                size_hint: None, None
                size: self.texture_size
                scale_down_color: True
                flat_color: app.theme.text_primary
                on_release:
                    app.filebrowser.target = app.ceed_data.root_path
                    app.filebrowser.dirselect =  app.filebrowser.multiselect = False
                    app.filebrowser.callback = app.ceed_data.get_filebrowser_callback(app.ceed_data.read_yaml_config, requires_app_settings=False)
                    app.filebrowser.open()
            FlatButton:
                text: 'Export all settings to YAML'
                size_hint: None, None
                size: self.texture_size
                scale_down_color: True
                flat_color: app.theme.text_primary
                on_release:
                    app.filebrowser.target = app.ceed_data.root_path
                    app.filebrowser.dirselect =  app.filebrowser.multiselect = False
                    app.filebrowser.callback = app.ceed_data.get_filebrowser_callback(app.ceed_data.write_yaml_config, True)
                    app.filebrowser.open()
            FlatButton:
                text: 'Import & append stages from YAML'
                size_hint: None, None
                size: self.texture_size
                scale_down_color: True
                flat_color: app.theme.text_primary
                on_release:
                    app.filebrowser.target = app.ceed_data.root_path
                    app.filebrowser.dirselect =  app.filebrowser.multiselect = False
                    app.filebrowser.callback = app.ceed_data.get_filebrowser_callback(app.ceed_data.read_yaml_config, stages_only=True)
                    app.filebrowser.open()
            FlatButton:
                text: 'Export stages to YAML'
                size_hint: None, None
                size: self.texture_size
                scale_down_color: True
                flat_color: app.theme.text_primary
                on_release:
                    app.filebrowser.target = app.ceed_data.root_path
                    app.filebrowser.dirselect =  app.filebrowser.multiselect = False
                    app.filebrowser.callback = app.ceed_data.get_filebrowser_callback(app.ceed_data.write_yaml_config, True, stages_only=True)
                    app.filebrowser.open()
