#:import Factory kivy.factory.Factory

<PinnedGraph@KNSpaceBehavior+BoxLayout>

<MainView@BoxLayout>:
    orientation: 'vertical'
    canvas:
        Color:
            rgba: app.theme.primary
        Rectangle:
            pos: self.pos
            size: self.size
    StackLayout:  # --------------------- TOP --------------------
        size_hint_y: None
        height: self.minimum_height
        orientation: 'lr-tb'
        VideoControl
            id: video
        FlatDivider:
            size_hint_y: None
            height: video.height
            color: app.theme.divider
        FlatImageToggleButton:
            knsname: 'gui_remote_view'
            size_hint_y: None
            height: video.height
            on_release:
                app.remote_viewer.start_listener() if self.state == 'down' else app.remote_viewer.stop_listener()
                if app.view_controller.propixx_lib and self.state == 'down': app.view_controller.set_led_mode(app.view_controller.LED_mode_idle)
            state: 'down' if app.remote_viewer.running else 'normal'
            source: 'ic_cast_white_24dp_1x.png' if self.state == 'normal' else 'ic_cast_connected_white_24dp_1x.png'
            scale_down_color: True
            flat_color: app.theme.accent
            hover_text: 'Remote viewer ' + ('[b]disconnected[/b]' if self.state == 'normal' else '[b]connected[/b]')
        FlatDivider:
            size_hint_y: None
            height: video.height
            color: app.theme.divider
        PaintBar
        FlatDivider:
            size_hint_y: None
            height: video.height
            color: app.theme.divider
        ControlBar
        FlatDivider:
            size_hint_y: None
            height: video.height
            color: app.theme.divider
        DataBar
        FlatDivider:
            size_hint_y: None
            height: video.height
            color: app.theme.divider
        FlatLabel:
            text: str(error_indicator.count)
            size_hint: None, None
            size: self.texture_size[0], video.height
            padding: '1dp', '5dp'
            flat_color: app.theme.text_primary
        FlatErrorIndicatorPopup:
            id: error_indicator
            scale_down_color: True
            source: 'flat_alert.png'
            flat_color: app.theme.accent
            size_hint_y: None
            height: video.height
            on_parent:
                app.error_indicator = self
                w = Factory.UserLogText()
                w.logger = self
                self._display.user_container.add_widget(w)
                self.levels = dict(self.levels)
                self.levels['user'] = self.levels['info']
                self.icon_names = {'user': 'info'}
            on_log_event: if args[3] != 'error': app.ceed_data.add_log_item('{}: {}'.format(args[3], args[2]))
            on_release: self.count = 0
    PinnedGraph:
        knsname: 'pinned_graph'
        size_hint_y: None
        height: self.minimum_height
        canvas:
            Color:
                rgba: app.theme.primary_text
            Rectangle:
                pos: self.pos
                size: self.size
    BoxLayout:
        orientation: 'horizontal'
        canvas:
            Color:
                rgba: app.theme.primary_text
            Rectangle:
                pos: self.pos
                size: self.size
        ControlDisplay
        BoxLayout:
            size_hint_x: None
            width: self.minimum_width
            orientation: 'horizontal'
            spacing: '5dp'
            ShapeListing
            StageListing
            FuncListing


<UserLogText@BoxLayout>:
    user_callback: None
    spacing: '10dp'
    size_hint_y: None
    logger: None
    height: 2 * text.line_height
    TextInput:
        id: text
        hint_text: "Notes"
    Button:
        size_hint_x: None
        width: self.texture_size[0]
        padding: '5dp', '5dp'
        on_release:
            if text.text: root.logger.add_item(text.text, 'user')
            text.text = ''
        text: 'Write to log'
