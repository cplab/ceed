{
    "ceed.function.FunctionFactoryBase": {
        "timebase_denominator": [
            "The denominator of the default timebase. See :attr:`timebase`.",
            "    ",
            ""
        ],
        "timebase_numerator": [
            "The numerator of the default timebase. See :attr:`timebase`.",
            "    ",
            ""
        ]
    },
    "ceed.view.controller.ViewControllerBase": {
        "LED_mode": [
            "The LED mode the projector is set to during the experiment.",
            "Its value is from the :attr:`led_modes`.",
            ""
        ],
        "LED_mode_idle": [
            "The LED mode the projector is set to before/after the experiment.",
            "Its value is from the :attr:`led_modes`.",
            ""
        ],
        "cam_offset_x": [
            "The x offset of the background image.",
            "    ",
            ""
        ],
        "cam_offset_y": [
            "The y offset of the background image.",
            "    ",
            ""
        ],
        "cam_rotation": [
            "The rotation angle of the background image.",
            "    ",
            ""
        ],
        "cam_scale": [
            "The scaling factor of the background image.",
            "    ",
            ""
        ],
        "frame_rate": [
            "The frame rate at which the data is played. This should match the",
            "currently selected monitor's refresh rate.",
            ""
        ],
        "fullscreen": [
            "Whether the second window should run in fullscreen mode. In fullscreen",
            "mode the window has no borders.",
            ""
        ],
        "output_count": [
            "Whether the corner pixel is used to output frame information on the",
            "PROPixx controller IO pot. If True,",
            ":class:`ceed.storage.controller.DataSerializer` is used to set the 24 bits",
            "of the corner pixel.",
            ""
        ],
        "preview": [
            "When run, if True, the data is played in the main GUI. When False,",
            "the data id played on the second window.",
            ""
        ],
        "screen_height": [
            "The screen height on which the data is played. This is the full-screen",
            "size.",
            ""
        ],
        "screen_offset_x": [
            "When there are multiple monitors, the window on which the data is played",
            "is controlled by the position of the screen. E.g. to set it on the right",
            "screen of two screens, each 1920 pixel wide and with the main screen being",
            "on the left. Then the :attr:`screen_offset_x` should be set to ``1920``.",
            ""
        ],
        "screen_width": [
            "The screen width on which the data is played. This is the full-screen",
            "size.",
            ""
        ],
        "use_software_frame_rate": [
            "Depending on the GPU, the software is unable to render faster than the",
            "GPU refresh rate. In that case, :attr:`frame_rate`, should match the value",
            "that the GPU is playing at and this should be False.",
            "",
            "If the GPU isn't forcing a frame rate. Then this should be True and",
            ":attr:`frame_rate` should be the desired frame rate.",
            "",
            "One can tell whether the GPU is forcing a frame rate by setting",
            ":attr:`frame_rate` to a large value and setting",
            ":attr:`use_software_frame_rate` to False and seeing what the resultant",
            "frame rate is. If it isn't capped at some value, e.g. 120Hz, it means that",
            "the GPU isn't forcing it.",
            ""
        ],
        "video_mode": [
            "The current video mode from the :attr:`video_modes`.",
            "    ",
            ""
        ]
    }
}