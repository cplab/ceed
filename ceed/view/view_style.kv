#:import Clock kivy.clock.Clock
#:import Matrix kivy.graphics.transformation.Matrix

<ControlDisplay@FloatLayout>:
    ScrollView:
        id: scroll
        scroll_type: ['bars']
        bar_width: '15dp'
        BoxLayout:
            id: box
            size_hint: None, None
            size: app.view_controller.screen_width * scatter.scale + dp(65), app.view_controller.screen_height * scatter.scale + dp(50)
            padding: '40dp', '25dp', '25dp', '25dp'
            pos_hint: {'pos': [0, 0]}
            Scatter:
                id: scatter
                do_scale: False
                do_translation: False, False
                do_rotation: False
                auto_bring_to_front: False
                do_collide_after_children: True
                size_hint: None, None
                size: app.view_controller.screen_width, app.view_controller.screen_height
                RelativeLayout:
                    size: app.view_controller.screen_width, app.view_controller.screen_height
                    canvas.before:
                        Color:
                            rgba: [0, 0, 0, 1]
                        Rectangle:
                            size: self.size
                    # canvas.after:
                    #     Color:
                    #         rgba: [1, 1, 1, .2]
                    #     Rectangle:
                    #         pos: 0, self.height
                    #         size: self.width, max(0, layout.height - self.height)
                    BufferImage:
                        knsname: 'central_display'
                        auto_bring_to_front: False
                        size_hint: None, None
                        on_image_size:
                            app.view_controller._restore_cam_pos()
                            self.size = self.image_size
                        scale_to_image: False

                        do_scale: painter.locked and painter.move_cam
                        do_translation: self.do_scale, self.do_scale
                        do_rotation: self.do_scale

                        transform: mea_align.make_matrix(app.view_controller.cam_transform)
                        on_transform: if not mea_align.compare_mat(self.transform, app.view_controller.cam_transform): app.view_controller.cam_transform = self.transform.tolist()
                    CeedPainter:
                        knsname: 'painter'
                        id: painter
                        size_hint: None, None
                        size: app.view_controller.screen_width, app.view_controller.screen_height
                        move_cam: False
                        move_array: False
                    MEAArrayAlign:
                        knsname: 'mea_align'
                        id: mea_align
                        do_scale: painter.locked and painter.move_array
                        do_translation: self.do_scale, self.do_scale
                        do_rotation: self.do_scale
                        size_hint: None, None
                        auto_bring_to_front: False
                        do_collide_after_children: False
                        on_show: self.color.a = 1 if self.show else 0

                        transform: self.make_matrix(app.view_controller.mea_transform)
                        on_transform: if not self.compare_mat(self.transform, app.view_controller.mea_transform): app.view_controller.mea_transform = self.transform.tolist()

                        num_rows: app.view_controller.mea_num_rows
                        num_cols: app.view_controller.mea_num_cols
                        pitch: app.view_controller.mea_pitch
                        diameter: app.view_controller.mea_diameter
            Widget:
                size_hint: None, None
                size: 0, 0
                canvas:
                    Color:
                        rgba: 1, 1, 1, .5
                    Rectangle:
                        pos: scatter.x - dp(2), scatter.y - dp(2)
                        size: dp(2), box.height - dp(46)
                    Rectangle:
                        pos: scatter.right, scatter.y - dp(2)
                        size: dp(2), box.height - dp(46)
                    Rectangle:
                        pos: scatter.x, scatter.top
                        size: box.width - dp(65), dp(2)
                    Rectangle:
                        pos: scatter.x, scatter.y - dp(2)
                        size: box.width - dp(65), dp(2)
    BoxLayout:
        orientation: 'vertical'
        pos: self.parent.x + dp(2), self.parent.top - self.height - dp(5)
        spacing: '5dp'
        size_hint: None, None
        size: self.minimum_size
        canvas:
            Color:
                rgba: app.theme.primary
            Rectangle:
                pos: self.pos
                size: self.size
        FlatImageButton:
            size_hint_y: None
            height: '34dp'
            on_release: slider.value = max(slider.min, slider.value - 0.25)
            source: 'magnify-minus-outline.png'
            scale_down_color: True
            flat_color: app.theme.accent
            hover_text: ''
        FlatImageButton:
            size_hint_y: None
            height: '34dp'
            on_release: slider.value = min(slider.max, slider.value + 0.25)
            source: 'magnify-plus-outline.png'
            scale_down_color: True
            flat_color: app.theme.accent
            hover_text: ''
        Slider:
            id: slider
            orientation: 'vertical'
            size_hint_y: None
            height: '200dp'
            max: 4
            min: min((root.width - dp(65)) / app.view_controller.screen_width, (root.height - dp(50)) / app.view_controller.screen_height)
            value: 1.
            on_value: scatter.scale = self.value


<ControlBar@BoxLayout>:
    size_hint: None, None
    size: self.minimum_width, '34dp'
    padding: '5dp'
    spacing: '5dp'
    ThemedSpinner:
        id: stage_spinner
        values: sorted(app.stage_factory.stage_names.keys()) if app.stage_factory.stage_names else []
        text_autoupdate: True
        on_text: app.view_controller.selected_stage_name = self.text
        size_hint_x: None
        width: self.minimum_width
    FlatImageToggleButton:
        source: 'flat_play.png' if self.state == 'normal' else 'flat_stop.png'
        flat_color: app.theme.accent
        on_release: app.view_controller.request_stage_start(stage_spinner.text) if self.state == 'down' else app.view_controller.request_stage_end()
        state: 'down' if app.view_controller.stage_active else 'normal'
        hover_text: '[b]start[/b] stage' if self.state == 'normal' else '[b]stop[/b] stage'
    FlatImageToggleButton:
        on_release: app.view_controller.start_process() if self.state == 'down' else app.view_controller.stop_process()
        state: 'down' if app.view_controller.view_process else 'normal'
        source: 'flat_window_restore.png'
        scale_down_color: True
        flat_color: app.theme.accent
        hover_text: '[b]hide[/b] / show projector window' if self.state == 'normal' else 'hide / [b]show[/b] projector window'
    FlatImageToggleButton:
        knsname: 'gui_remote_view'
        on_release:
            app.remote_viewer.start_listener() if self.state == 'down' else app.remote_viewer.stop_listener()
            if app.view_controller.propixx_lib and self.state == 'down': app.view_controller.set_led_mode(app.view_controller.LED_mode_idle)
        state: 'down' if app.remote_viewer.running else 'normal'
        source: 'ic_cast_white_24dp_1x.png' if self.state == 'normal' else 'ic_cast_connected_white_24dp_1x.png'
        scale_down_color: True
        flat_color: app.theme.accent
        hover_text: 'Remote viewer ' + ('[b]disconnected[/b]' if self.state == 'normal' else '[b]connected[/b]')
    FlatImageButton:
        on_parent: self.stage_graph = Factory.StageGraphPopup()
        on_release: self.stage_graph.open()
        source: 'flat_chart_line.png'
        scale_down_color: True
        flat_color: app.theme.accent
        hover_text: 'show stage timeline'
    ThemedLabel:
        text: '{:^ 3} / {:^ 3}'.format(int(round(app.view_controller.cpu_fps)), int(round(app.view_controller.gpu_fps)))
        size_hint_x: None
        padding_x: '5dp'
        width: self.texture_size[0]
    FlatImageButton:
        on_parent: self.more_widget = Factory.ViewConfig()
        scale_down_color: True
        source: 'flat_dots_vertical.png'
        flat_color: app.theme.accent
        on_release: self.more_widget.open(root)


<ViewConfig@FlatDropDown>:
    flat_color: app.theme.primary_text
    flat_border_color: app.theme.divider
    do_scroll: False, False
    FlatSplitter:
        size_hint: None, None
        height: self.minimum_height
        min_size: self.minimum_width
        sizable_from: 'right'
        flat_color: app.theme.accent
        GridLayout:
            orientation: 'vertical'
            size_hint_y: None
            height: self.minimum_height
            size_hint_min_x: self.minimum_width
            padding: '5dp'
            spacing: '5dp'
            cols: 2
            ThemedLabel:
                size_hint: None, None
                size: self.texture_size
                text: 'Reflect shapes horizontally'
            LightThemedToggleButton:
                text: 'true' if app.view_controller.flip_projector else 'false'
                state: 'down' if app.view_controller.flip_projector else 'normal'
                on_state: app.view_controller.flip_projector = self.state == 'down'
            ThemedLabel:
                size_hint: None, None
                size: self.texture_size
                text: 'Projector window is fullscreen'
            LightThemedToggleButton:
                text: 'true' if app.view_controller.fullscreen else 'false'
                state: 'down' if app.view_controller.fullscreen else 'normal'
                on_state: app.view_controller.request_fullscreen(self.state == 'down')
            ThemedLabel:
                size_hint: None, None
                size: self.texture_size
                text: 'Restrict projector play rate'
            LightThemedToggleButton:
                text: 'ON' if app.view_controller.use_software_frame_rate else 'OFF'
                state: 'down' if app.view_controller.use_software_frame_rate else 'normal'
                on_state: app.view_controller.use_software_frame_rate = self.state == 'down'
            ThemedLabel:
                size_hint: None, None
                size: self.texture_size
                text: 'Projector play rate'
            FlatSizedTextInput:
                input_filter: 'int'
                text: str(app.view_controller.frame_rate)
                on_text_validate: app.view_controller.frame_rate = float(self.text)
            ThemedLabel:
                size_hint: None, None
                size: self.texture_size
                text: 'Actual projector rate'
            ThemedLabel:
                size_hint: None, None
                size: self.texture_size
                text: str(app.view_controller.effective_frame_rate)
            ThemedLabel:
                size_hint: None, None
                size: self.texture_size
                text: 'Rate timebase numerator'
            FlatSizedTextInput:
                #background_color: root.flat_color
                input_filter: 'float'
                text: str(app.function_factory.timebase_numerator)
                on_text_validate: app.function_factory.timebase_numerator = float(self.text)
            ThemedLabel:
                size_hint: None, None
                size: self.texture_size
                text: 'Rate timebase denominator'
            FlatSizedTextInput:
                #background_color: root.flat_color
                input_filter: 'float'
                text: str(app.function_factory.timebase_denominator)
                on_text_validate: app.function_factory.timebase_denominator = float(self.text)
            ThemedLabel:
                size_hint: None, None
                size: self.texture_size
                text: 'Projector Video mode'
            ThemedSpinner:
                values: app.view_controller.video_modes
                text: app.view_controller.video_mode
                on_text:
                    app.view_controller.video_mode = self.text
                    if app.view_controller.propixx_lib: app.view_controller.set_video_mode(app.view_controller.video_mode)
                size_hint_x: None
                width: self.minimum_width
            ThemedLabel:
                size_hint: None, None
                size: self.texture_size
                text: 'Projector LED mode'
            ThemedSpinner:
                values: app.view_controller.led_modes.keys()
                text: app.view_controller.LED_mode
                on_text: app.view_controller.LED_mode = self.text
                size_hint_x: None
                width: self.minimum_width
            ThemedLabel:
                size_hint: None, None
                size: self.texture_size
                text: 'Projector LED mode (idle)'
            ThemedSpinner:
                values: app.view_controller.led_modes.keys()
                text: app.view_controller.LED_mode_idle
                on_text:
                    app.view_controller.LED_mode_idle = self.text
                    if app.view_controller.propixx_lib: app.view_controller.set_led_mode(app.view_controller.LED_mode_idle)
                size_hint_x: None
                width: self.minimum_width
