#:import ViewController ceed.view.controller.ViewController

<ControlDisplay@KNSpaceBehavior+ScrollView>
    knsname: 'control_display'
    on_size: scaler.transform = Matrix()
    bar_width: '10dp'
    scroll_type: ['bars']
    FloatLayout:
        size_hint: None, None
        size: scaler.bbox[1]
        Scatter:
            id: scaler
            size_hint: None, None
            size: ViewController.screen_width, ViewController.screen_height
            on_touch_up: self.pos = 0, 0

            do_translation: False, False
            do_scale: painter.locked and not painter.select and not painter.move_cam
            do_rotation: False
            Widget:
                BufferImage:
                    knsname: 'central_display'
                    auto_bring_to_front: False
                    size_hint: None, None
                    size: self.image_size
                    scale_to_image: False
                    #available_size: self.image_size

                    do_scale: painter.locked and not painter.select and painter.move_cam
                    do_translation: self.do_scale, self.do_scale
                    do_rotation: self.do_scale

                    scale: ViewController.cam_scale
                    x: ViewController.cam_offset_x
                    y: ViewController.cam_offset_y
                    rotation: ViewController.cam_rotation

                    on_x: ViewController.cam_offset_x = self.x
                    on_y: ViewController.cam_offset_y = self.y
                    on_scale: ViewController.cam_scale = self.scale
                    on_rotation: ViewController.cam_rotation = self.rotation
                CeedPainter:
                    knsname: 'painter'
                    id: painter
                    size_hint: None, None
                    size: ViewController.screen_width, ViewController.screen_height
                    move_cam: False

<ControlBar@BoxLayout>:
    spacing: '9dp'
    size_hint: None, None
    size: self.minimum_width, '35dp'
    BoxLayout:
        size_hint_x: None
        width: self.minimum_width
        size_hint_min_y: self.minimum_height
        AutoSizedSpinner:
            id: stage_spinner
            values: sorted(StageFactory.stage_names.keys()) if StageFactory.stage_names else []
            size_hint: None, None
            size: self.minimum_size
            text_autoupdate: True
            padding: '10dp', '10dp'
        Button:
            text: 'Go'
            padding_x: '10dp'
            size_hint_x: None
            width: self.texture_size[0]
            on_release: ViewController.request_stage_start(stage_spinner.text)
    Button:
        text: 'Stop'
        size_hint_x: None
        padding_x: '5dp'
        width: self.texture_size[0]
        on_release: ViewController.request_stage_end()
    ToggleButton:
        text: 'View'
        size_hint_x: None
        padding_x: '5dp'
        width: self.texture_size[0]
        on_release: ViewController.start_process() if self.state == 'down' else ViewController.stop_process()
    ToggleButton:
        text: 'Preview'
        size_hint_x: None
        padding_x: '5dp'
        width: self.texture_size[0]
        on_release: ViewController.preview = self.state == 'down'
        state: 'down' if ViewController.preview else 'normal'
    ToggleButton:
        text: 'fullscreen'
        size_hint_x: None
        padding_x: '5dp'
        width: self.texture_size[0]
        on_release: ViewController.request_fullscreen(self.state == 'down')
        state: 'down' if ViewController.fullscreen else 'normal'
    Label:
        text: '{:^ 3} / {:^ 3}'.format(int(round(ViewController.cpu_fps)), int(round(ViewController.gpu_fps)))
        size_hint_x: None
        padding_x: '5dp'
        width: self.texture_size[0]
