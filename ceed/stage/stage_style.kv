#:import knspace kivy.uix.behaviors.knspace.knspace
#:import get_color_from_hex kivy.utils.get_color_from_hex
#:import ceil math.ceil

<StageListing@FlatSplitter>:
    size_hint_x: None
    width: '150dp'
    sizable_from: 'left'
    strip_size: '5dp'
    min_size: '15dp'
    max_size: '400dp'
    spacing: '5dp'
    flat_color: app.theme.accent
    BoxLayout:
        orientation: 'vertical'
        ScrollView:
            bar_width: '10dp'
            scroll_type: ['bars']
            do_scroll_y: False
            size_hint_y: None
            height: stages_label.texture_size[1]
            FlatLabel:
                id: stages_label
                text: 'Stages'
                width: max(self.texture_size[0], self.parent.width)
                size_hint_x: None
                padding: '5dp', '5dp'
                flat_color: app.theme.text_primary
                center_texture: True
        ScrollView:
            bar_width: '10dp'
            scroll_type: ['bars']
            StageList:
                id: stages
                knsname: 'stages'
                orientation: 'vertical'
                spacing: '3dp'
                padding: '0dp', (0 if self.children else '10dp')
                size_hint_y: None
                height: self.minimum_height
                size_hint_min_x: self.minimum_width
                touch_deselect_last: True
                spacer_props: {'size_hint_y': None, 'height': '40dp', 'size_hint_min_x': '40dp'}
                drag_classes: ['shape', 'shape_group', 'func', 'func_spinner', 'stage']
                drag_append_end: True


<StageChildren@CeedStageDragableLayoutBehavior+BoxLayout>

<StageWidget>:
    size_hint_y: None
    height: self.minimum_height
    size_hint_min_x: self.minimum_width
    orientation: 'vertical'
    more: more.__self__
    settings: settings.__self__
    settings_root: settings_root.__self__
    show_more: expand.is_open
    expand: expand
    stage_widget: stage_widget
    stage_widget: stage_widget
    func_widget: func_widget
    shape_widget: shape_widget
    spacing: '3dp'
    BoxSelector:
        id: selector
        size_hint_y: None
        height: '34dp'
        size_hint_min_x: self.minimum_width
        orientation: 'horizontal'
        controller: knspace.stages
        spacing: '5dp'
        padding: '5dp'
        canvas:
            Color:
                rgba: app.theme.primary_light if not root.selected else app.theme.primary
            Rectangle:
                size: self.size
                pos: self.pos
        DraggingWidget:
            drag_widget: selector.__self__
            obj_dragged: root
            drag_cls: 'stage'
        ExpandWidget:
            id: expand
        FlatLabel:
            text: root.stage.name if root.stage else ''
            size_hint_min_x: self.texture_size[0]
            padding: '5dp', '5dp'
            flat_color: app.theme.text_primary
            center_texture: False
        FlatImageButton:
            scale_down_color: True
            source: 'flat_delete.png'
            flat_color: app.theme.accent
            on_release: root.remove_from_parent()
        FlatImageButton:
            scale_down_color: True
            source: 'flat_dots_vertical.png'
            flat_color: app.theme.accent
            on_release:
                settings_root.open(selector)
                splitter.width = max(selector.width, splitter.width)
    FlatDropDown:
        id: settings_root
        flat_color: app.theme.primary_text
        flat_border_color: app.theme.divider
        do_scroll: False, False
        FlatSplitter:
            id: splitter
            size_hint: None, None
            height: self.minimum_height
            min_size: self.minimum_width
            sizable_from: 'left'
            flat_color: app.theme.accent
            BoxLayout:
                id: settings
                size_hint_y: None
                height: self.minimum_height
                size_hint_min_x: self.minimum_width
                orientation: 'vertical'
                spacing: '5dp'
                padding: '5dp'
                FlatSizedTextInput:
                    id: name_input
                    background_color: settings_root.flat_color
                    text: root.stage.name if root.stage else ''
                    on_focus: if not self.focus: self.text = app.stage_factory._change_stage_name(root.stage, self.text)
                BoxLayout:
                    size_hint_y: None
                    height: '34dp'
                    spacing: '5dp'
                    LightThemedToggleButton:
                        text: 'R'
                        state: 'down' if root.stage and root.stage.color_r else 'normal'
                        on_state: root.stage.color_r = self.state == 'down'
                    LightThemedToggleButton:
                        text: 'G'
                        state: 'down' if root.stage and root.stage.color_g else 'normal'
                        on_state: root.stage.color_g = self.state == 'down'
                    LightThemedToggleButton:
                        text: 'B'
                        state: 'down' if root.stage and root.stage.color_b else 'normal'
                        on_state: root.stage.color_b = self.state == 'down'
                GridLayout:
                    size_hint_y: None
                    height: self.minimum_height
                    size_hint_min_x: self.minimum_width
                    padding: '5dp'
                    spacing: '5dp'
                    cols: 2
                    FlatLabel:
                        size_hint: None, None
                        size: self.texture_size
                        text: 'Stage order'
                        flat_color: app.theme.text_primary
                    BoxLayout:
                        spacing: '5dp'
                        size_hint_y: None
                        height: self.minimum_height
                        size_hint_min_x: self.minimum_width
                        LightThemedToggleButton:
                            size_hint_y: None
                            height: self.texture_size[1]
                            size_hint_min_x: self.texture_size[0]
                            padding: '5dp', '5dp'
                            text: 'Serial'
                            state: 'down' if root.stage and root.stage.order == 'serial' else 'normal'
                            on_state: root.stage.order = 'serial' if self.state == 'down' else 'parallel'
                        LightThemedToggleButton:
                            size_hint_y: None
                            height: self.texture_size[1]
                            size_hint_min_x: self.texture_size[0]
                            padding: '5dp', '5dp'
                            text: 'Parallel'
                            state: 'down' if root.stage and root.stage.order == 'parallel' else 'normal'
                            on_state: root.stage.order = 'parallel' if self.state == 'down' else 'serial'
                    FlatLabel:
                        size_hint: None, None
                        size: self.texture_size
                        text: 'End on'
                        flat_color: app.theme.text_primary
                    BoxLayout:
                        spacing: '5dp'
                        size_hint_y: None
                        height: self.minimum_height
                        size_hint_min_x: self.minimum_width
                        LightThemedToggleButton:
                            size_hint_y: None
                            height: self.texture_size[1]
                            size_hint_min_x: self.texture_size[0]
                            padding: '5dp', '5dp'
                            text: 'All'
                            state: 'down' if root.stage and root.stage.complete_on == 'all' else 'normal'
                            on_state: root.stage.complete_on = 'all' if self.state == 'down' else 'any'
                        LightThemedToggleButton:
                            size_hint_y: None
                            height: self.texture_size[1]
                            size_hint_min_x: self.texture_size[0]
                            padding: '5dp', '5dp'
                            text: 'Any'
                            state: 'down' if root.stage and root.stage.complete_on == 'any' else 'normal'
                            on_state: root.stage.complete_on = 'any' if self.state == 'down' else 'all'
    BoxLayout:
        id: more
        spacing: '3dp'
        size_hint_y: None
        height: self.minimum_height
        size_hint_min_x: self.minimum_width
        orientation: 'vertical'
        StageChildren:
            id: stage_widget
            padding: '5dp', 0, 0, (0 if self.children else '5dp')
            spacing: '5dp'
            size_hint_y: None
            height: self.minimum_height
            size_hint_min_x: self.minimum_width
            orientation: 'vertical'
            source_obj: root
            spacer_props: {'size_hint_y': None, 'height': '40dp', 'size_hint_min_x': '40dp'}
            drag_classes: ['stage']
            drag_target_stage: root.stage
            drag_append_end: True
            canvas:
                Color:
                    rgba: app.theme.divider
                Rectangle:
                    pos: self.x + dp(1), self.y
                    size: dp(2), self.height
        StageChildren:
            id: func_widget
            padding: '5dp', 0, 0, (0 if self.children else '5dp')
            spacing: '3dp'
            size_hint_y: None
            height: self.minimum_height
            size_hint_min_x: self.minimum_width
            orientation: 'vertical'
            source_obj: root
            spacer_props: {'size_hint_y': None, 'height': '40dp', 'size_hint_min_x': '40dp'}
            drag_classes: ['func', 'func_spinner']
            drag_target_stage: root.stage
            drag_append_end: True
            canvas:
                Color:
                    rgba: app.theme.divider
                Rectangle:
                    pos: self.x + dp(1), self.y
                    size: dp(2), self.height
        StageChildren:
            id: shape_widget
            padding: '5dp', 0, 0, (0 if self.children else '5dp')
            spacing: '3dp'
            size_hint_y: None
            height: self.minimum_height
            size_hint_min_x: self.minimum_width
            orientation: 'vertical'
            source_obj: root
            spacer_props: {'size_hint_y': None, 'height': '40dp', 'size_hint_min_x': '40dp'}
            drag_classes: ['shape', 'shape_group']
            drag_target_stage: root.stage
            drag_append_end: True
            canvas:
                Color:
                    rgba: app.theme.divider
                Rectangle:
                    pos: self.x + dp(1), self.y
                    size: dp(2), self.height


<StageShapeDisplay>:
    size_hint_y: None
    height: '34dp'
    size_hint_min_x: self.minimum_width
    orientation: 'horizontal'
    controller: knspace.stages
    use_parent: False
    spacing: '5dp'
    canvas:
        Color:
            rgba: app.theme.primary_light if not root.selected else app.theme.primary
        Rectangle:
            size: self.size
            pos: self.pos
    FlatLabel:
        padding: '5dp', '5dp'
        flat_color: app.theme.text_primary
        center_texture: False
        text: root.stage_shape.name if root.stage_shape else ''
        size_hint_min_x: self.texture_size[0]
    FlatImageButton:
        scale_down_color: True
        source: 'flat_delete.png'
        flat_color: app.theme.accent
        on_release: root.stage_shape.stage.remove_shape(root.stage_shape)


<ShapeGraphSelector@FlatToggleButton>:
    controller: None
    size_hint: None, None
    size: self.texture_size
    padding: '5dp', '5dp'
    scale_down_color: True
    flat_color: app.theme.text_primary
    flat_background_color: app.theme.primary_light if self.state == 'normal' else app.theme.primary
    on_release: self.controller._shapes_displayed_update_trigger()

<ShapeGraphSelectorAll@FlatButton>:
    controller: None
    size_hint: None, None
    size: self.texture_size
    padding: '5dp', '5dp'
    scale_down_color: True
    flat_color: app.theme.text_primary
    flat_background_color: app.theme.primary_light if self.state == 'normal' else app.theme.primary
    on_release: self.controller.apply_selection_all(self.text.lower())


<GraphSelectionBox@FlatSplitter>:
    max_size: root_selection_box.minimum_width + dp(40)
    size_hint_x: None
    min_size: '20dp'
    sizable_from: 'right'
    flat_color: app.theme.accent
    controller: None
    shape_selection_widget: shape_selection_widget
    size_hint_max_y: root_selection_box.minimum_height + shape_selection_widget.height
    ScrollView:
        bar_width: '10dp'
        scroll_type: ['bars']
        BoxLayout:
            id: root_selection_box
            orientation: 'vertical'
            size_hint_min_y: self.minimum_height
            size_hint_x: None
            width: self.minimum_width
            spacing: '5dp'
            Widget
            ScrollView:
                size_hint_min_x: shape_selection_widget.minimum_width
                do_scroll_x: False
                bar_width: '10dp'
                scroll_type: ['bars']
                size_hint_y: None
                height: shape_selection_widget.minimum_height
                GridLayout:
                    id: shape_selection_widget
                    cols: 4
                    size_hint_y: None
                    height: self.minimum_height
                    spacing: '5dp'
            GridLayout:
                cols: 4
                spacing: '5dp'
                size_hint_y: None
                height: self.minimum_height
                size_hint_min_x: self.minimum_width
                Widget
                ShapeGraphSelectorAll:
                    controller: root.controller
                    text: 'R'
                ShapeGraphSelectorAll:
                    controller: root.controller
                    text: 'G'
                ShapeGraphSelectorAll:
                    controller: root.controller
                    text: 'B'

<StageGraph>:
    size_hint_min_x: self.minimum_width
    size_hint_y: None
    min_size: self.minimum_height
    on_min_size: self.height = max(self.height, self.min_size)
    max_size: max(graph_root.size_hint_max_y or 0, shape_selection_box.size_hint_max_y) + dp(40)
    sizable_from: 'bottom'
    flat_color: app.theme.accent
    shape_selection_widget: shape_selection_box.shape_selection_widget
    graph: graph
    graph_labels: graph_labels
    unpinned_parent: None
    unpinned_root: None
    BoxLayout:
        id: root_box
        size_hint_min: self.minimum_size
        spacing: '5dp'
        padding: '5dp'
        GraphSelectionBox:
            id: shape_selection_box
            controller: root
        BoxLayout:
            id: graph_root
            size_hint_min: self.minimum_size
            orientation: 'vertical'
            spacing: '10dp'
            size_hint_max_y: self.minimum_height + graph_box.height
            BoxLayout:
                orientation: 'horizontal'
                size_hint_min_x: self.minimum_width
                size_hint_y: None
                height: self.minimum_height
                spacing: '5dp'
                padding: ['10dp', 0]
                Widget:
                    size_hint_y: None
                    height: '40dp'
                    TimeSliceSelection:
                        size: graph_ticks_big.view_size
                        x: self.parent.x + graph_ticks_big.view_pos[0]
                        y: self.parent.y + graph_ticks_big.view_pos[1]
                        min: root.xmin
                        max: root.xmax
                        low_val: root.view_xmin
                        high_val: root.view_xmax
                        on_low_val: root.view_xmin = self.low_val
                        on_high_val: root.view_xmax = self.high_val
                    Graph:
                        id: graph_ticks_big
                        size: self.parent.size
                        pos: self.parent.pos
                        xmin: root.xmin
                        xmax: root.xmax
                        x_ticks_major: ceil((self.xmax - self.xmin) / 5.)
                        x_grid_label: True
                        draw_border: False
                        _with_stencilbuffer: False
                        label_options: {'color': (0, 0, 0, 1)}
                FlatSizedTextInput:
                    size_hint_x: None
                    width: '50dp'
                    background_color: root.flat_color
                    input_filter: 'float'
                    on_text_validate: root.view_xmin = float(self.text)
                    text: '{:.1f}'.format(root.view_xmin)
                FlatSizedTextInput:
                    size_hint_x: None
                    width: '50dp'
                    background_color: root.flat_color
                    input_filter: 'float'
                    on_text_validate: root.view_xmax = float(self.text)
                    text: '{:.1f}'.format(root.view_xmax)
            FlatDivider:
                orientation: 'horizontal'
                color: app.theme.primary_light
            ScrollView:
                size_hint_min_x: graph_box.minimum_width
                bar_width: '10dp'
                scroll_type: ['bars']
                BoxLayout:
                    id: graph_box
                    size_hint_min_x: self.minimum_width
                    size_hint_y: None
                    height: max(max(self.minimum_height, root.n_plots_displayed * root.shape_height + (root.n_plots_displayed - 1) * root.shape_spacing), dp(20))
                    spacing: graph_ticks.view_pos[0]
                    padding: [0, 0, graph_ticks.width - graph_ticks.view_pos[0] - graph_ticks.view_size[0], 0]
                    BoxLayout:
                        id: graph_labels
                        orientation: 'vertical'
                        size_hint_x: None
                        width: self.minimum_width
                        size_hint_min_y: self.minimum_height
                    Widget:
                        id: graph
                        size_hint_min_x: '50dp'
                        on_center: root._plot_pos_update_trigger()
            Widget:
                size_hint_y: None
                height: '35dp'
                Graph:
                    id: graph_ticks
                    height: '35dp'
                    y: self.parent.y
                    width: graph_box.width - graph_labels.width
                    right: self.center and self.parent.right
                    xmin: root.view_xmin
                    xmax: root.view_xmax
                    x_ticks_major: ceil((self.xmax - self.xmin) / 5.)
                    x_grid_label: True
                    draw_border: False
                    _with_stencilbuffer: False
                    label_options: {'color': (0, 0, 0, 1)}
            FlatDivider:
                orientation: 'horizontal'
                color: app.theme.primary_light
            BoxLayout:
                size_hint: None, None
                size: self.minimum_width, '34dp'
                padding: '5dp'
                spacing: '5dp'
                FlatSpinner:
                    id: stage_spinner
                    values: sorted(app.stage_factory.stage_names.keys()) if app.stage_factory.stage_names else []
                    text_autoupdate: True
                    size_hint_x: None
                    width: self.minimum_width
                    flat_color: app.theme.text_primary
                    flat_menu_color: app.theme.accent
                    flat_drop_background_color: app.theme.primary_text
                    flat_drop_text_color: app.theme.text_primary
                    flat_border_color: app.theme.divider
                FlatSizedTextInput:
                    id: rate
                    size_hint_x: None
                    width: '40dp'
                    text: '30.'
                    hint_text: 'rate'
                    background_color: root.flat_color
                    input_filter: 'float'
                FlatImageButton:
                    source: 'flat_refresh.png'
                    flat_color: app.theme.accent
                    on_release: if stage_spinner.text: root.refresh_graph(stage_spinner.text, float(rate.text))
                    hover_text: 'refresh'
                FlatImageToggleButton:
                    source: 'flat_pin.png' if self.state == 'normal' else 'flat_pin_off.png'
                    flat_color: app.theme.accent
                    on_release: root.set_pin(self.state == 'down')
                    hover_text: 'refresh'

<StageGraphPopup@FlatModalView>:
    flat_color: app.theme.primary_text
    flat_border_color: app.theme.divider
    size_hint: None, None
    size: splitter.size
    FlatSplitter:
        id: splitter
        size_hint: None, None
        height: self.minimum_height
        min_size: self.minimum_width
        sizable_from: 'right'
        flat_color: app.theme.accent
        StageGraph:
            unpinned_parent: splitter
            unpinned_root: root
